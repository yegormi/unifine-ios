openapi: 3.0.0
paths:
  /signup:
    post:
      operationId: signup
      summary: Sign up
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /login:
    post:
      operationId: login
      summary: Log in
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
  /me:
    get:
      operationId: getMe
      summary: Get the current user
      tags:
        - user
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /checks:
    post:
      operationId: createCheck
      summary: Create a check
      tags:
        - check
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCheckDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    get:
      operationId: getChecks
      summary: Get all checks
      tags:
        - check
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckPreviewDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
  /checks/{id}:
    get:
      operationId: getCheckById
      summary: Get a check by id
      tags:
        - check
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
    delete:
      operationId: deleteCheckById
      summary: Delete a check by id
      tags:
        - check
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorDto'
      security:
        - bearer: []
info:
  title: UniFine
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://unifine.eventbook.pp.ua
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: 66c6fab4f13bf5134c167e8b
          description: The id of the user
        email:
          type: string
          example: John Doe
          description: The name of the user
      required:
        - id
        - email
    SignupResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
    ApiErrorDto:
      type: object
      properties:
        code:
          type: string
          description: The error code
          example: entity-not-found
          enum:
            - internal
            - no-access-token
            - invalid-access-token
            - expired-access-token
            - entity-not-found
            - incorrect-password
            - email-not-unique
            - not-author
            - no-prompt-specified
        message:
          type: string
          description: A human-readable message describing the error
          example: Entity not found
        details:
          type: object
          description: Additional details about the error
          example:
            entity: User
      required:
        - message
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          example: admin123
      required:
        - email
        - password
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsIn
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - accessToken
        - user
    CreateCheckDto:
      type: object
      properties:
        topic:
          type: string
        style:
          type: string
        excludedWords:
          type: string
        prompt:
          type: string
        file:
          type: string
          format: binary
    IssueDto:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        text:
          type: string
        message:
          type: string
        suggestion:
          type: string
        startIndex:
          type: number
        endIndex:
          type: number
      required:
        - id
        - type
        - text
        - message
        - suggestion
        - startIndex
        - endIndex
    CheckDto:
      type: object
      properties:
        id:
          type: string
        prompt:
          type: string
        title:
          type: string
        summary:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueDto'
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - prompt
        - title
        - summary
        - issues
        - createdAt
    CheckPreviewDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        summary:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - summary
        - createdAt
